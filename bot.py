import logging
import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from csv_importer import CarsCSVImporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7826759414:AAGaLHFPhbdoXYABMdx9E9EIERLWoU_uWwg"

@dataclass
class Car:
    id: int
    brand: str
    model: str
    year: int
    price: int
    mileage: int
    fuel_type: str
    transmission: str
    color: str
    description: str
    photos: List[str]
    is_available: bool = True

class CarDatabase:
    def __init__(self, db_path: str = "cars.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cars (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                brand TEXT NOT NULL,
                model TEXT NOT NULL,
                year INTEGER NOT NULL,
                price INTEGER NOT NULL,
                mileage INTEGER NOT NULL,
                fuel_type TEXT NOT NULL,
                transmission TEXT NOT NULL,
                color TEXT NOT NULL,
                description TEXT,
                photos TEXT,
                is_available BOOLEAN DEFAULT 1
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                car_id INTEGER NOT NULL,
                order_date TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                FOREIGN KEY (car_id) REFERENCES cars (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
        self.add_sample_cars()
    
    def add_sample_cars(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        sample_cars = [
            {
                'brand': 'Toyota',
                'model': 'Camry',
                'year': 2020,
                'price': 2500000,
                'mileage': 45000,
                'fuel_type': '–ë–µ–Ω–∑–∏–Ω',
                'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                'color': '–ë–µ–ª—ã–π',
                'description': '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
                'photos': '["https://example.com/camry1.jpg", "https://example.com/camry2.jpg"]'
            },
            {
                'brand': 'BMW',
                'model': 'X5',
                'year': 2019,
                'price': 4200000,
                'mileage': 62000,
                'fuel_type': '–ë–µ–Ω–∑–∏–Ω',
                'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                'color': '–ß–µ—Ä–Ω—ã–π',
                'description': '–ü—Ä–µ–º–∏—É–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
                'photos': '["https://example.com/x5_1.jpg", "https://example.com/x5_2.jpg"]'
            },
            {
                'brand': 'Audi',
                'model': 'A4',
                'year': 2021,
                'price': 3200000,
                'mileage': 28000,
                'fuel_type': '–ë–µ–Ω–∑–∏–Ω',
                'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                'color': '–°–µ—Ä—ã–π',
                'description': '–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –≥–∞—Ä–∞–Ω—Ç–∏—è, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –æ–ø—Ü–∏–π',
                'photos': '["https://example.com/a4_1.jpg", "https://example.com/a4_2.jpg"]'
            }
        ]
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM cars")
        if cursor.fetchone()[0] == 0:
            for car in sample_cars:
                cursor.execute('''
                    INSERT INTO cars (brand, model, year, price, mileage, fuel_type, 
                                   transmission, color, description, photos)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (car['brand'], car['model'], car['year'], car['price'], 
                     car['mileage'], car['fuel_type'], car['transmission'], 
                     car['color'], car['description'], car['photos']))
        
        conn.commit()
        conn.close()
    
    def get_cars(self, limit: int = 10, offset: int = 0, brand: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if brand:
            cursor.execute('''
                SELECT * FROM cars WHERE brand = ? AND is_available = 1 
                ORDER BY id DESC LIMIT ? OFFSET ?
            ''', (brand, limit, offset))
        else:
            cursor.execute('''
                SELECT * FROM cars WHERE is_available = 1 
                ORDER BY id DESC LIMIT ? OFFSET ?
            ''', (limit, offset))
        
        columns = [description[0] for description in cursor.description]
        cars = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return cars
    
    def get_car_by_id(self, car_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM cars WHERE id = ?', (car_id,))
        row = cursor.fetchone()
        
        if row:
            columns = [description[0] for description in cursor.description]
            car = dict(zip(columns, row))
            conn.close()
            return car
        
        conn.close()
        return None
    
    def get_brands(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT DISTINCT brand FROM cars WHERE is_available = 1 ORDER BY brand')
        brands = [row[0] for row in cursor.fetchall()]
        
        conn.close()
        return brands
    
    def create_order(self, user_id: int, car_id: int) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO orders (user_id, car_id, order_date)
                VALUES (?, ?, ?)
            ''', (user_id, car_id, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            conn.close()
            return False
    
    def import_from_csv(self, csv_file: str = "cars_data.csv", clear_existing: bool = False) -> bool:
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            importer = CarsCSVImporter(csv_file, self.db_path)
            return importer.import_to_database(clear_existing)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ CSV: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = CarDatabase()

class CarShopBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("cars", self.cars_command))
        self.application.add_handler(CommandHandler("brands", self.brands_command))
        self.application.add_handler(CommandHandler("import", self.import_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data="view_cars")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É", callback_data="search_brand")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–æ –±—Ä–µ–Ω–¥–∞–º
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cars - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
/brands - –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

*üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:*
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
Email: info@autoshop.ru
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def cars_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cars"""
        await self.show_cars(update, context, page=0)
    
    async def brands_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /brands"""
        brands = db.get_brands()
        
        if not brands:
            await update.message.reply_text("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        keyboard = []
        for brand in brands:
            keyboard.append([InlineKeyboardButton(f"üöó {brand}", callback_data=f"brand_{brand}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        brands_text = "*üè≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:*\n\n"
        for brand in brands:
            brands_text += f"‚Ä¢ {brand}\n"
        
        await update.message.reply_text(
            brands_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def import_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /import –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = update.effective_user.id
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        await update.message.reply_text("üì• –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞...")
        
        try:
            success = db.import_from_csv("cars_data.csv", clear_existing=True)
            
            if success:
                cars_count = len(db.get_cars())
                await update.message.reply_text(
                    f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                    f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {cars_count}\n"
                    f"üìÅ –§–∞–π–ª: cars_data.csv"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
    
    async def show_cars(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0, brand: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        cars = db.get_cars(limit=5, offset=page*5, brand=brand)
        
        if not cars:
            text = "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        else:
            text = f"üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
            
            keyboard = []
            for car in cars:
                text += f"*{car['brand']} {car['model']} ({car['year']})*\n"
                text += f"üí∞ –¶–µ–Ω–∞: {car['price']:,} ‚ÇΩ\n"
                text += f"üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {car['mileage']:,} –∫–º\n"
                text += f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}\n"
                text += f"üé® –¶–≤–µ—Ç: {car['color']}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üöó {car['brand']} {car['model']} - {car['price']:,} ‚ÇΩ",
                    callback_data=f"car_{car['id']}"
                )])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}_{brand or ''}"))
            
            if len(cars) == 5:  # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ 5 –º–∞—à–∏–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page+1}_{brand or ''}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
    
    async def show_car_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        car = db.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""
üöó *{car['brand']} {car['model']} ({car['year']})*

üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ
üõ£Ô∏è *–ü—Ä–æ–±–µ–≥:* {car['mileage']:,} –∫–º
‚õΩ *–¢–æ–ø–ª–∏–≤–æ:* {car['fuel_type']}
üîß *–ö–ü–ü:* {car['transmission']}
üé® *–¶–≤–µ—Ç:* {car['color']}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{car['description']}

‚úÖ *–í –Ω–∞–ª–∏—á–∏–∏*
        """
        
        keyboard = [
            [InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{car_id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="view_cars")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = []
        if car.get('photos'):
            try:
                photos = json.loads(car['photos']) if isinstance(car['photos'], str) else car['photos']
            except:
                photos = []
        
        if photos:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
            try:
                media = []
                for i, photo_url in enumerate(photos[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    if i == 0:
                        media.append(InputMediaPhoto(media=photo_url, caption=text, parse_mode=ParseMode.MARKDOWN))
                    else:
                        media.append(InputMediaPhoto(media=photo_url))
                
                await update.callback_query.delete_message()
                await context.bot.send_media_group(
                    chat_id=update.effective_chat.id,
                    media=media
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self.start_command(update, context)
        elif data == "view_cars":
            await self.show_cars(update, context)
        elif data == "search_brand":
            await self.brands_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data.startswith("page_"):
            parts = data.split("_")
            page = int(parts[1])
            brand = parts[2] if len(parts) > 2 and parts[2] else None
            await self.show_cars(update, context, page, brand)
        elif data.startswith("brand_"):
            brand = data.replace("brand_", "")
            await self.show_cars(update, context, brand=brand)
        elif data.startswith("car_"):
            car_id = int(data.replace("car_", ""))
            await self.show_car_details(update, context, car_id)
        elif data.startswith("order_"):
            car_id = int(data.replace("order_", ""))
            await self.create_order(update, context, car_id)
    
    async def create_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        user_id = update.effective_user.id
        car = db.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = db.create_order(user_id, car_id)
        
        if success:
            text = f"""
‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*

üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car['brand']} {car['model']} ({car['year']})
üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ

üìû *–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.*

*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üìß Email: info@autoshop.ru
            """
            
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        elif any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = CarShopBot()
    bot.run()
