"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
"""

import logging
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from database_schema import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(WAITING_PHOTOS, WAITING_BRAND, WAITING_MODEL, WAITING_YEAR, WAITING_MILEAGE,
 WAITING_ENGINE_TYPE, WAITING_TRANSMISSION, WAITING_DRIVE_TYPE, WAITING_COLOR,
 WAITING_REGION, WAITING_PRICE, WAITING_DESCRIPTION, WAITING_CONTACT) = range(13)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()

class CarSalesBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.application = Application.builder().token(bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CommandHandler("filters", self.filters_command))
        self.application.add_handler(CommandHandler("reset", self.reset_command))
        self.application.add_handler(CommandHandler("favorites", self.favorites_command))
        self.application.add_handler(CommandHandler("sell", self.sell_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        
        # ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏
        sell_conversation = ConversationHandler(
            entry_points=[CommandHandler("sell", self.sell_command)],
            states={
                WAITING_PHOTOS: [MessageHandler(filters.PHOTO, self.handle_photos)],
                WAITING_BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_brand)],
                WAITING_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_model)],
                WAITING_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_year)],
                WAITING_MILEAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_mileage)],
                WAITING_ENGINE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_engine_type)],
                WAITING_TRANSMISSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_transmission)],
                WAITING_DRIVE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_drive_type)],
                WAITING_COLOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_color)],
                WAITING_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_region)],
                WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_price)],
                WAITING_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_description)],
                WAITING_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_contact)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_sell)]
        )
        self.application.add_handler(sell_conversation)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        keyboard = [
            [InlineKeyboardButton("üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ", callback_data="catalog")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="filters")],
            [InlineKeyboardButton("üíù –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ", callback_data="sell")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CarSalesBot!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üöó –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (–º–∞—Ä–∫–∞, –≥–æ–¥, —Ü–µ–Ω–∞, –ø—Ä–æ–±–µ–≥)
‚Ä¢ üíù –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ üí∞ –†–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ üìû –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
/filters - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
/favorites - –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
/sell - –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
3. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –∞–≤—Ç–æ" –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è

*üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        await self.show_cars(update, context, page=0)
    
    async def filters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filters"""
        await self.show_filters_menu(update, context)
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        await update.message.reply_text(
            "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites"""
        user_id = update.effective_user.id
        favorites = db.get_favorites(user_id)
        
        if not favorites:
            await update.message.reply_text(
                "üíù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∏–º–∞—è ‚ù§Ô∏è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        text = f"üíù *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏* ({len(favorites)} —à—Ç.)\n\n"
        
        keyboard = []
        for car in favorites[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            text += f"üöó *{car['brand']} {car['model']} ({car['year']})*\n"
            text += f"üí∞ {car['price']:,} ‚ÇΩ | üõ£Ô∏è {car['mileage']:,} –∫–º\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"üöó {car['brand']} {car['model']} - {car['price']:,} ‚ÇΩ",
                callback_data=f"car_{car['car_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def sell_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏
        if 'sell_data' in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
        context.user_data['sell_data'] = {
            'photos': [],
            'current_step': 'photos'
        }
        
        await update.message.reply_text(
            "üí∞ *–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ*\n\n"
            "üì∏ *–®–∞–≥ 1 –∏–∑ 13: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_PHOTOS
    
    async def handle_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if 'sell_data' not in context.user_data:
            return ConversationHandler.END
        
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id
        
        context.user_data['sell_data']['photos'].append(file_id)
        
        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(context.user_data['sell_data']['photos'])}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        
        return WAITING_PHOTOS
    
    async def handle_brand(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏"""
        brand = update.message.text.strip()
        context.user_data['sell_data']['brand'] = brand
        
        await update.message.reply_text(
            f"‚úÖ –ú–∞—Ä–∫–∞: {brand}\n\n"
            "üöó *–®–∞–≥ 3 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_MODEL
    
    async def handle_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏"""
        model = update.message.text.strip()
        context.user_data['sell_data']['model'] = model
        
        await update.message.reply_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å: {model}\n\n"
            "üìÖ *–®–∞–≥ 4 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_YEAR
    
    async def handle_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞"""
        try:
            year = int(update.message.text.strip())
            if year < 1990 or year > 2024:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1990 –¥–æ 2024:"
                )
                return WAITING_YEAR
            
            context.user_data['sell_data']['year'] = year
            
            await update.message.reply_text(
                f"‚úÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n\n"
                "üõ£Ô∏è *–®–∞–≥ 5 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            return WAITING_MILEAGE
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ):")
            return WAITING_YEAR
    
    async def handle_mileage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–±–µ–≥–∞"""
        try:
            mileage = int(update.message.text.strip())
            if mileage < 0:
                await update.message.reply_text("‚ùå –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º:")
                return WAITING_MILEAGE
            
            context.user_data['sell_data']['mileage'] = mileage
            
            keyboard = [
                [InlineKeyboardButton("‚õΩ –ë–µ–Ω–∑–∏–Ω", callback_data="engine_–ë–µ–Ω–∑–∏–Ω")],
                [InlineKeyboardButton("‚õΩ –î–∏–∑–µ–ª—å", callback_data="engine_–î–∏–∑–µ–ª—å")],
                [InlineKeyboardButton("üîã –≠–ª–µ–∫—Ç—Ä–æ", callback_data="engine_–≠–ª–µ–∫—Ç—Ä–æ")],
                [InlineKeyboardButton("üîã –ì–∏–±—Ä–∏–¥", callback_data="engine_–ì–∏–±—Ä–∏–¥")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–±–µ–≥: {mileage:,} –∫–º\n\n"
                "‚õΩ *–®–∞–≥ 6 –∏–∑ 13: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è*",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return WAITING_ENGINE_TYPE
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥ (—á–∏—Å–ª–æ):")
            return WAITING_MILEAGE
    
    async def handle_engine_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        engine_type = update.callback_query.data.replace("engine_", "")
        context.user_data['sell_data']['engine_type'] = engine_type
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç", callback_data="transmission_–ê–≤—Ç–æ–º–∞—Ç")],
            [InlineKeyboardButton("‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∫–∞", callback_data="transmission_–ú–µ—Ö–∞–Ω–∏–∫–∞")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_type}\n\n"
            "üîß *–®–∞–≥ 7 –∏–∑ 13: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return WAITING_TRANSMISSION
    
    async def handle_transmission(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ö–ü–ü"""
        transmission = update.callback_query.data.replace("transmission_", "")
        context.user_data['sell_data']['transmission'] = transmission
        
        keyboard = [
            [InlineKeyboardButton("üöó –ü–µ—Ä–µ–¥–Ω–∏–π", callback_data="drive_–ü–µ—Ä–µ–¥–Ω–∏–π")],
            [InlineKeyboardButton("üöó –ó–∞–¥–Ω–∏–π", callback_data="drive_–ó–∞–¥–Ω–∏–π")],
            [InlineKeyboardButton("üöó –ü–æ–ª–Ω—ã–π", callback_data="drive_–ü–æ–ª–Ω—ã–π")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ –ö–ü–ü: {transmission}\n\n"
            "üöó *–®–∞–≥ 8 –∏–∑ 13: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return WAITING_DRIVE_TYPE
    
    async def handle_drive_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤–æ–¥–∞"""
        drive_type = update.callback_query.data.replace("drive_", "")
        context.user_data['sell_data']['drive_type'] = drive_type
        
        await update.callback_query.edit_message_text(
            f"‚úÖ –ü—Ä–∏–≤–æ–¥: {drive_type}\n\n"
            "üé® *–®–∞–≥ 9 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_COLOR
    
    async def handle_color(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞"""
        color = update.message.text.strip()
        context.user_data['sell_data']['color'] = color
        
        await update.message.reply_text(
            f"‚úÖ –¶–≤–µ—Ç: {color}\n\n"
            "üìç *–®–∞–≥ 10 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_REGION
    
    async def handle_region(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        region = update.message.text.strip()
        context.user_data['sell_data']['region'] = region
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏–æ–Ω: {region}\n\n"
            "üí∞ *–®–∞–≥ 11 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_PRICE
    
    async def handle_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã"""
        try:
            price = int(update.message.text.strip().replace(' ', '').replace(',', ''))
            if price <= 0:
                await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:")
                return WAITING_PRICE
            
            context.user_data['sell_data']['price'] = price
            
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞: {price:,} ‚ÇΩ\n\n"
                "üìù *–®–∞–≥ 12 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è*\n"
                "(—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.)",
                parse_mode=ParseMode.MARKDOWN
            )
            
            return WAITING_DESCRIPTION
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
            return WAITING_PRICE
    
    async def handle_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = update.message.text.strip()
        context.user_data['sell_data']['description'] = description
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            "üìû *–®–∞–≥ 13 –∏–∑ 13: –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*\n"
            "(—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏)",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_CONTACT
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contact = update.message.text.strip()
        context.user_data['sell_data']['contact'] = contact
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        await self.show_sell_preview(update, context)
        
        return ConversationHandler.END
    
    async def show_sell_preview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        data = context.user_data['sell_data']
        
        text = f"""
üìã *–ü—Ä–µ–≤—å—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*

üöó *{data['brand']} {data['model']} ({data['year']})*
üí∞ –¶–µ–Ω–∞: {data['price']:,} ‚ÇΩ
üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {data['mileage']:,} –∫–º
‚õΩ –î–≤–∏–≥–∞—Ç–µ–ª—å: {data['engine_type']}
üîß –ö–ü–ü: {data['transmission']}
üöó –ü—Ä–∏–≤–æ–¥: {data['drive_type']}
üé® –¶–≤–µ—Ç: {data['color']}
üìç –†–µ–≥–∏–æ–Ω: {data['region']}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{data['description']}

üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
{data['contact']}

üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(data['photos'])}
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_ad")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_ad")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def cancel_sell(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        if 'sell_data' in context.user_data:
            del context.user_data['sell_data']
        
        await update.message.reply_text(
            "‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        
        return ConversationHandler.END
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        await self.show_admin_panel(update, context)
    
    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        stats = db.get_statistics()
        
        text = f"""
üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üöó –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['active_cars']}
‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_moderation']}
üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="admin_moderation")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def show_cars(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0, filters: Dict = None):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        cars = db.get_cars(limit=5, offset=page*5, filters=filters)
        
        if not cars:
            text = "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        else:
            text = f"üöó *–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
            
            keyboard = []
            for car in cars:
                text += f"üöó *{car['brand']} {car['model']} ({car['year']})*\n"
                text += f"üí∞ {car['price']:,} ‚ÇΩ | üõ£Ô∏è {car['mileage']:,} –∫–º\n"
                text += f"üìç {car.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üöó {car['brand']} {car['model']} - {car['price']:,} ‚ÇΩ",
                    callback_data=f"car_{car['car_id']}"
                )])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
            
            if len(cars) == 5:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
    
    async def show_car_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        car = db.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = update.effective_user.id
        
        text = f"""
üöó *{car['brand']} {car['model']} ({car['year']})*

üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ
üõ£Ô∏è *–ü—Ä–æ–±–µ–≥:* {car['mileage']:,} –∫–º
‚õΩ *–î–≤–∏–≥–∞—Ç–µ–ª—å:* {car.get('engine_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üîß *–ö–ü–ü:* {car.get('transmission', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üöó *–ü—Ä–∏–≤–æ–¥:* {car.get('drive_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üé® *–¶–≤–µ—Ç:* {car.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç *–†–µ–≥–∏–æ–Ω:* {car.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{car.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {car.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{car_id}")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", callback_data=f"contact_{car_id}")],
            [InlineKeyboardButton("üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = []
        if car.get('photos'):
            try:
                photos = json.loads(car['photos']) if isinstance(car['photos'], str) else car['photos']
            except:
                photos = []
        
        if photos:
            try:
                media = []
                for i, photo_url in enumerate(photos[:5]):
                    if i == 0:
                        media.append(InputMediaPhoto(media=photo_url, caption=text, parse_mode=ParseMode.MARKDOWN))
                    else:
                        media.append(InputMediaPhoto(media=photo_url))
                
                await update.callback_query.delete_message()
                await context.bot.send_media_group(
                    chat_id=update.effective_chat.id,
                    media=media
                )
                
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def show_filters_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        text = """
üîç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:
        """
        
        keyboard = [
            [InlineKeyboardButton("üè≠ –ú–∞—Ä–∫–∞", callback_data="filter_brand")],
            [InlineKeyboardButton("üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", callback_data="filter_year")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="filter_price")],
            [InlineKeyboardButton("üõ£Ô∏è –ü—Ä–æ–±–µ–≥", callback_data="filter_mileage")],
            [InlineKeyboardButton("‚õΩ –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è", callback_data="filter_engine")],
            [InlineKeyboardButton("üîß –ö–ü–ü", callback_data="filter_transmission")],
            [InlineKeyboardButton("üìç –†–µ–≥–∏–æ–Ω", callback_data="filter_region")],
            [InlineKeyboardButton("üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="apply_filters")],
            [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="clear_filters")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self.start_command(update, context)
        elif data == "catalog":
            await self.show_cars(update, context)
        elif data == "filters":
            await self.show_filters_menu(update, context)
        elif data == "favorites":
            await self.favorites_command(update, context)
        elif data == "sell":
            await self.sell_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "feedback":
            await self.show_feedback_form(update, context)
        elif data.startswith("page_"):
            page = int(data.split("_")[1])
            await self.show_cars(update, context, page)
        elif data.startswith("car_"):
            car_id = int(data.replace("car_", ""))
            await self.show_car_details(update, context, car_id)
        elif data.startswith("favorite_"):
            car_id = int(data.replace("favorite_", ""))
            await self.toggle_favorite(update, context, car_id)
        elif data.startswith("contact_"):
            car_id = int(data.replace("contact_", ""))
            await self.show_contact_info(update, context, car_id)
        elif data == "publish_ad":
            await self.publish_advertisement(update, context)
        elif data == "cancel_ad":
            await self.cancel_advertisement(update, context)
        elif data == "admin_moderation":
            await self.show_moderation_queue(update, context)
        elif data.startswith("moderate_"):
            parts = data.split("_")
            car_id = int(parts[1])
            action = parts[2]
            await self.moderate_car(update, context, car_id, action)
    
    async def toggle_favorite(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        favorites = db.get_favorites(user_id)
        car_ids = [fav['car_id'] for fav in favorites]
        
        if car_id in car_ids:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            db.remove_from_favorites(user_id, car_id)
            await query.answer("üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            db.add_to_favorites(user_id, car_id)
            await query.answer("‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    
    async def show_contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        car = db.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""
üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car['brand']} {car['model']} ({car['year']})
üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ

üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {car.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {car.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}

*–î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.*
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ö –∞–≤—Ç–æ–º–æ–±–∏–ª—é", callback_data=f"car_{car_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def publish_advertisement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        if 'sell_data' not in context.user_data:
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return
        
        data = context.user_data['sell_data']
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        car_id = db.add_car(
            user_id=user_id,
            brand=data['brand'],
            model=data['model'],
            year=data['year'],
            mileage=data['mileage'],
            price=data['price'],
            engine_type=data.get('engine_type'),
            transmission=data.get('transmission'),
            drive_type=data.get('drive_type'),
            color=data.get('color'),
            region=data.get('region'),
            description=data.get('description'),
            photos=data['photos']
        )
        
        if car_id:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            del context.user_data['sell_data']
            
            await update.callback_query.edit_message_text(
                "‚úÖ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n"
                "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.callback_query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def cancel_advertisement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        if 'sell_data' in context.user_data:
            del context.user_data['sell_data']
        
        await update.callback_query.edit_message_text(
            "‚ùå *–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_moderation_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        queue = db.get_moderation_queue()
        
        if not queue:
            await update.callback_query.edit_message_text(
                "‚úÖ *–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*\n\n"
                "–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        text = f"üìã *–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏* ({len(queue)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)\n\n"
        
        keyboard = []
        for item in queue[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            text += f"üöó *{item['brand']} {item['model']} ({item['year']})*\n"
            text += f"üí∞ {item['price']:,} ‚ÇΩ | üë§ {item['first_name']}\n\n"
            
            keyboard.append([
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"moderate_{item['car_id']}_approve"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_{item['car_id']}_reject")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def moderate_car(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int, action: str):
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        moderator_id = update.effective_user.id
        
        if action == "approve":
            success = db.moderate_car(car_id, moderator_id, True)
            if success:
                await update.callback_query.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")
            else:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
        elif action == "reject":
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            success = db.moderate_car(car_id, moderator_id, False, "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            if success:
                await update.callback_query.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            else:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await self.show_moderation_queue(update, context)
    
    async def show_feedback_form(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        text = """
üìû *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∂–∞–ª–æ–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ.
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        if any(word in text for word in ['–≤–æ–ø—Ä–æ—Å', '–ø—Ä–æ–±–ª–µ–º–∞', '–∂–∞–ª–æ–±–∞', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            db.add_feedback(user_id, update.message.text)
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        elif any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        elif any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ CarSalesBot...")
        self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import BOT_TOKEN
    except ImportError:
        # –ï—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        BOT_TOKEN = "8431697857:AAFBcnKw3BCX_jL5QwfUN7aCj71nNiSRBh4"
        print("‚ö†Ô∏è –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    bot = CarSalesBot(BOT_TOKEN)
    bot.run()

if __name__ == "__main__":
    main()
