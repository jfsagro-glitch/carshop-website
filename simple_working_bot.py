#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è CarSalesBot
"""

import logging
import json
import os
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8431697857:AAFBcnKw3BCX_jL5QwfUN7aCj71nNiSRBh4"

class SimpleCarBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.application = Application.builder().token(bot_token).build()
        self.setup_handlers()
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                is_admin BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cars (
                car_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                brand TEXT NOT NULL,
                model TEXT NOT NULL,
                year INTEGER NOT NULL,
                mileage INTEGER NOT NULL,
                price INTEGER NOT NULL,
                engine_type TEXT,
                transmission TEXT,
                color TEXT,
                description TEXT,
                photos TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                car_id INTEGER NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (car_id) REFERENCES cars (car_id),
                UNIQUE(user_id, car_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.add_sample_data()
    
    def add_sample_data(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM cars")
        if cursor.fetchone()[0] == 0:
            sample_cars = [
                {
                    'brand': 'Toyota',
                    'model': 'Camry',
                    'year': 2020,
                    'price': 2500000,
                    'mileage': 45000,
                    'engine_type': '–ë–µ–Ω–∑–∏–Ω',
                    'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                    'color': '–ë–µ–ª—ã–π',
                    'description': '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
                    'photos': '["https://images.unsplash.com/photo-1621007947382-bb3c3994e3fb?w=800"]'
                },
                {
                    'brand': 'BMW',
                    'model': 'X5',
                    'year': 2019,
                    'price': 4200000,
                    'mileage': 62000,
                    'engine_type': '–ë–µ–Ω–∑–∏–Ω',
                    'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                    'color': '–ß–µ—Ä–Ω—ã–π',
                    'description': '–ü—Ä–µ–º–∏—É–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
                    'photos': '["https://images.unsplash.com/photo-1555215695-3004980ad54e?w=800"]'
                },
                {
                    'brand': 'Audi',
                    'model': 'A4',
                    'year': 2021,
                    'price': 3200000,
                    'mileage': 28000,
                    'engine_type': '–ë–µ–Ω–∑–∏–Ω',
                    'transmission': '–ê–≤—Ç–æ–º–∞—Ç',
                    'color': '–°–µ—Ä—ã–π',
                    'description': '–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –≥–∞—Ä–∞–Ω—Ç–∏—è, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –æ–ø—Ü–∏–π',
                    'photos': '["https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?w=800"]'
                }
            ]
            
            for car in sample_cars:
                cursor.execute('''
                    INSERT INTO cars (user_id, brand, model, year, price, mileage, 
                                   engine_type, transmission, color, description, photos)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (1, car['brand'], car['model'], car['year'], car['price'], 
                     car['mileage'], car['engine_type'], car['transmission'], 
                     car['color'], car['description'], car['photos']))
        
        conn.commit()
        conn.close()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CommandHandler("favorites", self.favorites_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_user(user_id, user.username, user.first_name, user.last_name)
        
        keyboard = [
            [InlineKeyboardButton("üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ", callback_data="catalog")],
            [InlineKeyboardButton("üíù –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω", callback_data="admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CarSalesBot!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üöó –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
‚Ä¢ üíù –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ üìû –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
/favorites - –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
2. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ê–¥–º–∏–Ω" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        await self.show_cars(update, context, page=0)
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites"""
        user_id = update.effective_user.id
        favorites = self.get_favorites(user_id)
        
        if not favorites:
            text = "üíù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–≤—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∏–º–∞—è ‚ù§Ô∏è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
                )
            return
        
        text = f"üíù *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏* ({len(favorites)} —à—Ç.)\n\n"
        
        keyboard = []
        for car in favorites[:10]:
            text += f"üöó *{car['brand']} {car['model']} ({car['year']})*\n"
            text += f"üí∞ {car['price']:,} ‚ÇΩ | üõ£Ô∏è {car['mileage']:,} –∫–º\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"üöó {car['brand']} {car['model']} - {car['price']:,} ‚ÇΩ",
                callback_data=f"car_{car['car_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
                )
            return
        
        stats = self.get_statistics()
        
        text = f"""
üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['total_cars']}
üíù –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {stats['total_favorites']}
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
    
    async def show_cars(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        cars = self.get_cars(limit=5, offset=page*5)
        
        if not cars:
            text = "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        else:
            text = f"üöó *–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
            
            keyboard = []
            for car in cars:
                text += f"üöó *{car['brand']} {car['model']} ({car['year']})*\n"
                text += f"üí∞ {car['price']:,} ‚ÇΩ | üõ£Ô∏è {car['mileage']:,} –∫–º\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üöó {car['brand']} {car['model']} - {car['price']:,} ‚ÇΩ",
                    callback_data=f"car_{car['car_id']}"
                )])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
            
            if len(cars) == 5:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
    
    async def show_car_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        car = self.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = update.effective_user.id
        
        text = f"""
üöó *{car['brand']} {car['model']} ({car['year']})*

üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ
üõ£Ô∏è *–ü—Ä–æ–±–µ–≥:* {car['mileage']:,} –∫–º
‚õΩ *–î–≤–∏–≥–∞—Ç–µ–ª—å:* {car.get('engine_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üîß *–ö–ü–ü:* {car.get('transmission', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üé® *–¶–≤–µ—Ç:* {car.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{car.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{car_id}")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", callback_data=f"contact_{car_id}")],
            [InlineKeyboardButton("üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = []
        if car.get('photos'):
            try:
                photos = json.loads(car['photos']) if isinstance(car['photos'], str) else car['photos']
            except:
                photos = []
        
        if photos and photos[0]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            keyboard.insert(0, [InlineKeyboardButton("üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data=f"photos_{car_id}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self.start_command(update, context)
        elif data == "catalog":
            await self.show_cars(update, context)
        elif data == "favorites":
            await self.favorites_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "admin":
            await self.admin_command(update, context)
        elif data.startswith("page_"):
            page = int(data.split("_")[1])
            await self.show_cars(update, context, page)
        elif data.startswith("car_"):
            car_id = int(data.replace("car_", ""))
            await self.show_car_details(update, context, car_id)
        elif data.startswith("favorite_"):
            car_id = int(data.replace("favorite_", ""))
            await self.toggle_favorite(update, context, car_id)
        elif data.startswith("contact_"):
            car_id = int(data.replace("contact_", ""))
            await self.show_contact_info(update, context, car_id)
        elif data.startswith("photos_"):
            car_id = int(data.replace("photos_", ""))
            await self.show_car_photos(update, context, car_id)
        elif data == "admin_stats":
            await self.show_admin_stats(update, context)
        elif data == "admin_users":
            await self.show_admin_users(update, context)
    
    async def toggle_favorite(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        favorites = self.get_favorites(user_id)
        car_ids = [fav['car_id'] for fav in favorites]
        
        if car_id in car_ids:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            self.remove_from_favorites(user_id, car_id)
            await update.callback_query.answer("üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.add_to_favorites(user_id, car_id)
            await update.callback_query.answer("‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    
    async def show_car_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        car = self.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos = []
        if car.get('photos'):
            try:
                photos = json.loads(car['photos']) if isinstance(car['photos'], str) else car['photos']
            except:
                photos = []
        
        if not photos or not photos[0]:
            text = "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            keyboard = [[InlineKeyboardButton("üîô –ö –∞–≤—Ç–æ–º–æ–±–∏–ª—é", callback_data=f"car_{car_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        text = f"""üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {car['brand']} {car['model']} ({car['year']})

üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º:
{photos[0]}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        
        keyboard = [
            [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", url=photos[0])],
            [InlineKeyboardButton("üîô –ö –∞–≤—Ç–æ–º–æ–±–∏–ª—é", callback_data=f"car_{car_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def show_contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, car_id: int):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        car = self.get_car_by_id(car_id)
        
        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"""
üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car['brand']} {car['model']} ({car['year']})
üí∞ *–¶–µ–Ω–∞:* {car['price']:,} ‚ÇΩ

*–î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è" –Ω–∏–∂–µ.*
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/autosalege_bot")],
            [InlineKeyboardButton("üîô –ö –∞–≤—Ç–æ–º–æ–±–∏–ª—é", callback_data=f"car_{car_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def show_admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        stats = self.get_statistics()
        
        text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {stats['total_users']}
üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:* {stats['total_cars']}
üíù *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {stats['total_favorites']}
üìÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def show_admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.get_users()
        
        text = f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã* ({len(users)} —á–µ–ª.)\n\n"
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            text += f"üë§ {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} (@{user.get('username', '–Ω–µ—Ç username')})\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        elif any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
    
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    def add_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        
        conn.commit()
        conn.close()
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        conn.close()
        return result and result[0] == 1
    
    def get_cars(self, limit: int = 10, offset: int = 0) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM cars WHERE is_active = 1 
            ORDER BY created_at DESC LIMIT ? OFFSET ?
        ''', (limit, offset))
        
        columns = [description[0] for description in cursor.description]
        cars = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return cars
    
    def get_car_by_id(self, car_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM cars WHERE car_id = ?', (car_id,))
        row = cursor.fetchone()
        
        if row:
            columns = [description[0] for description in cursor.description]
            car = dict(zip(columns, row))
            conn.close()
            return car
        
        conn.close()
        return None
    
    def add_to_favorites(self, user_id: int, car_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            conn = sqlite3.connect("cars.db")
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR IGNORE INTO favorites (user_id, car_id)
                VALUES (?, ?)
            ''', (user_id, car_id))
            
            conn.commit()
            conn.close()
            return True
        except:
            return False
    
    def remove_from_favorites(self, user_id: int, car_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        try:
            conn = sqlite3.connect("cars.db")
            cursor = conn.cursor()
            
            cursor.execute('''
                DELETE FROM favorites WHERE user_id = ? AND car_id = ?
            ''', (user_id, car_id))
            
            conn.commit()
            conn.close()
            return True
        except:
            return False
    
    def get_favorites(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c.* FROM cars c 
            JOIN favorites f ON c.car_id = f.car_id
            WHERE f.user_id = ? AND c.is_active = 1
            ORDER BY f.created_at DESC
        ''', (user_id,))
        
        columns = [description[0] for description in cursor.description]
        cars = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return cars
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM cars WHERE is_active = 1')
        total_cars = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM favorites')
        total_favorites = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'total_users': total_users,
            'total_cars': total_cars,
            'total_favorites': total_favorites
        }
    
    def get_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect("cars.db")
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
        columns = [description[0] for description in cursor.description]
        users = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return users
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ SimpleCarBot...")
        self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleCarBot(BOT_TOKEN)
    bot.run()

if __name__ == "__main__":
    main()
