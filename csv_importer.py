"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
"""

import csv
import json
import os
import sqlite3
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

class CarsCSVImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    
    def __init__(self, csv_file: str = "cars_data.csv", db_path: str = "cars.db"):
        self.csv_file = csv_file
        self.db_path = db_path
    
    def read_csv_file(self) -> List[Dict]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        cars_data = []
        
        if not os.path.exists(self.csv_file):
            logger.error(f"CSV —Ñ–∞–π–ª {self.csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return cars_data
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    photos_str = row.get('photos', '')
                    if photos_str:
                        photos = [photo.strip() for photo in photos_str.split(',')]
                    else:
                        photos = []
                    
                    car_data = {
                        'id': int(row.get('id', 0)),
                        'brand': row.get('brand', '').strip(),
                        'model': row.get('model', '').strip(),
                        'year': int(row.get('year', 0)),
                        'price': int(row.get('price', 0)),
                        'mileage': int(row.get('mileage', 0)),
                        'fuel_type': row.get('fuel_type', '').strip(),
                        'transmission': row.get('transmission', '').strip(),
                        'color': row.get('color', '').strip(),
                        'description': row.get('description', '').strip(),
                        'photos': photos,
                        'is_available': True
                    }
                    cars_data.append(car_data)
            
            logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞")
            return cars_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def import_to_database(self, clear_existing: bool = False) -> bool:
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
            cars_data = self.read_csv_file()
            if not cars_data:
                logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                return False
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if clear_existing:
                cursor.execute('DELETE FROM cars')
                logger.info("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            imported_count = 0
            for car in cars_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID
                    cursor.execute('SELECT id FROM cars WHERE id = ?', (car['id'],))
                    if cursor.fetchone():
                        logger.warning(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID {car['id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ JSON
                    photos_json = json.dumps(car['photos'])
                    
                    cursor.execute('''
                        INSERT INTO cars (id, brand, model, year, price, mileage, fuel_type, 
                                       transmission, color, description, photos, is_available)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        car['id'], car['brand'], car['model'], car['year'], 
                        car['price'], car['mileage'], car['fuel_type'], 
                        car['transmission'], car['color'], car['description'], 
                        photos_json, car['is_available']
                    ))
                    imported_count += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car['id']}: {e}")
                    continue
            
            conn.commit()
            conn.close()
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def validate_csv_data(self) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö CSV —Ñ–∞–π–ª–∞"""
        errors = []
        cars_data = self.read_csv_file()
        
        for i, car in enumerate(cars_data, 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['brand', 'model', 'year', 'price']
            for field in required_fields:
                if not car.get(field):
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
            if car.get('year', 0) < 1990 or car.get('year', 0) > 2024:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ {car.get('year')}")
            
            if car.get('price', 0) <= 0:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ {car.get('price')}")
            
            if car.get('mileage', 0) < 0:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥ {car.get('mileage')}")
        
        return errors
    
    def get_import_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞"""
        cars_data = self.read_csv_file()
        
        if not cars_data:
            return {"total": 0, "brands": [], "price_range": {"min": 0, "max": 0}}
        
        brands = list(set(car['brand'] for car in cars_data))
        prices = [car['price'] for car in cars_data]
        
        return {
            "total": len(cars_data),
            "brands": sorted(brands),
            "price_range": {
                "min": min(prices),
                "max": max(prices)
            },
            "years": {
                "min": min(car['year'] for car in cars_data),
                "max": max(car['year'] for car in cars_data)
            }
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöó –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    importer = CarsCSVImporter()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    errors = importer.validate_csv_data()
    if errors:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = importer.get_import_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['total']}")
    print(f"  –ë—Ä–µ–Ω–¥—ã: {', '.join(stats['brands'])}")
    print(f"  –¶–µ–Ω—ã: {stats['price_range']['min']:,} - {stats['price_range']['max']:,} ‚ÇΩ")
    print(f"  –ì–æ–¥—ã: {stats['years']['min']} - {stats['years']['max']}")
    
    # –ò–º–ø–æ—Ä—Ç
    print(f"\nüì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    success = importer.import_to_database(clear_existing=True)
    
    if success:
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

if __name__ == "__main__":
    main()

