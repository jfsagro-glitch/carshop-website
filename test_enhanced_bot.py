#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è CarSalesBot
"""

import unittest
import tempfile
import os
import json
import sqlite3
from unittest.mock import Mock, patch
from database_schema import DatabaseManager

class TestDatabaseManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è DatabaseManager"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False)
        self.temp_db.close()
        self.db = DatabaseManager(self.temp_db.name)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        os.unlink(self.temp_db.name)
    
    def test_add_user(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        success = self.db.add_user(
            user_id=123456,
            username="testuser",
            first_name="Test",
            last_name="User"
        )
        self.assertTrue(success)
        
        user = self.db.get_user(123456)
        self.assertIsNotNone(user)
        self.assertEqual(user['username'], "testuser")
        self.assertEqual(user['first_name'], "Test")
    
    def test_add_car(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "testuser", "Test")
        
        car_id = self.db.add_car(
            user_id=123456,
            brand="Toyota",
            model="Camry",
            year=2020,
            mileage=50000,
            price=2000000,
            engine_type="–ë–µ–Ω–∑–∏–Ω",
            transmission="–ê–≤—Ç–æ–º–∞—Ç",
            color="–ë–µ–ª—ã–π",
            description="–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        )
        
        self.assertIsNotNone(car_id)
        
        car = self.db.get_car_by_id(car_id)
        self.assertIsNotNone(car)
        self.assertEqual(car['brand'], "Toyota")
        self.assertEqual(car['model'], "Camry")
    
    def test_get_cars_with_filters(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "testuser", "Test")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        car1_id = self.db.add_car(
            user_id=123456,
            brand="Toyota",
            model="Camry",
            year=2020,
            mileage=50000,
            price=2000000,
            engine_type="–ë–µ–Ω–∑–∏–Ω"
        )
        
        car2_id = self.db.add_car(
            user_id=123456,
            brand="BMW",
            model="X5",
            year=2019,
            mileage=60000,
            price=4000000,
            engine_type="–ë–µ–Ω–∑–∏–Ω"
        )
        
        # –û–¥–æ–±—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        self.db.moderate_car(car1_id, 123456, True)
        self.db.moderate_car(car2_id, 123456, True)
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ
        cars = self.db.get_cars(filters={'brand': 'Toyota'})
        self.assertEqual(len(cars), 1)
        self.assertEqual(cars[0]['brand'], 'Toyota')
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
        cars = self.db.get_cars(filters={'price_to': 3000000})
        self.assertEqual(len(cars), 1)
        self.assertEqual(cars[0]['brand'], 'Toyota')
    
    def test_favorites(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "testuser", "Test")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        car_id = self.db.add_car(
            user_id=123456,
            brand="Toyota",
            model="Camry",
            year=2020,
            mileage=50000,
            price=2000000
        )
        
        # –û–¥–æ–±—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        self.db.moderate_car(car_id, 123456, True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        success = self.db.add_to_favorites(123456, car_id)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        favorites = self.db.get_favorites(123456)
        self.assertEqual(len(favorites), 1)
        self.assertEqual(favorites[0]['car_id'], car_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        success = self.db.remove_from_favorites(123456, car_id)
        self.assertTrue(success)
        
        favorites = self.db.get_favorites(123456)
        self.assertEqual(len(favorites), 0)
    
    def test_moderation_queue(self):
        """–¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "testuser", "Test")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
        car_id = self.db.add_car(
            user_id=123456,
            brand="Toyota",
            model="Camry",
            year=2020,
            mileage=50000,
            price=2000000
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        queue = self.db.get_moderation_queue()
        self.assertEqual(len(queue), 1)
        self.assertEqual(queue[0]['car_id'], car_id)
        self.assertEqual(queue[0]['status'], 'pending')
        
        # –û–¥–æ–±—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        success = self.db.moderate_car(car_id, 123456, True)
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º
        car = self.db.get_car_by_id(car_id)
        self.assertTrue(car['is_active'])
        self.assertTrue(car['is_moderated'])
    
    def test_user_filters(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "testuser", "Test")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = {
            'brand': 'Toyota',
            'year_from': 2018,
            'price_to': 3000000
        }
        
        success = self.db.save_user_filters(123456, filters)
        self.assertTrue(success)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        saved_filters = self.db.get_user_filters(123456)
        self.assertEqual(saved_filters, filters)
    
    def test_statistics(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.db.add_user(123456, "user1", "User1")
        self.db.add_user(789012, "user2", "User2")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        car_id = self.db.add_car(
            user_id=123456,
            brand="Toyota",
            model="Camry",
            year=2020,
            mileage=50000,
            price=2000000
        )
        
        # –û–¥–æ–±—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        self.db.moderate_car(car_id, 123456, True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.db.get_statistics()
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.assertGreaterEqual(stats['total_users'], 2)
        self.assertEqual(stats['active_cars'], 1)
        self.assertEqual(stats['pending_moderation'], 0)

class TestBotFunctionality(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False)
        self.temp_db.close()
        self.db = DatabaseManager(self.temp_db.name)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        os.unlink(self.temp_db.name)
    
    def test_admin_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "user", "User")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        self.db.add_user(789012, "admin", "Admin")
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET is_admin = 1 WHERE user_id = ?', (789012,))
        conn.commit()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        self.assertFalse(self.db.is_admin(123456))
        self.assertTrue(self.db.is_admin(789012))
    
    def test_seller_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(123456, "user", "User")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        self.db.add_user(789012, "seller", "Seller")
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET is_seller = 1 WHERE user_id = ?', (789012,))
        conn.commit()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        self.assertFalse(self.db.is_seller(123456))
        self.assertTrue(self.db.is_seller(789012))

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CarSalesBot...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestDatabaseManager))
    suite.addTests(loader.loadTestsFromTestCase(TestBotFunctionality))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏:")
        print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   –ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_tests()
    exit(0 if success else 1)
