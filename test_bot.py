"""
–¢–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
"""

import unittest
import sqlite3
import os
from bot import CarDatabase, Car

class TestCarDatabase(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.test_db_path = "test_cars.db"
        self.db = CarDatabase(self.test_db_path)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        if os.path.exists(self.test_db_path):
            os.remove(self.test_db_path)
    
    def test_database_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.assertTrue(os.path.exists(self.test_db_path))
    
    def test_add_car(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        cars_before = len(self.db.get_cars())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        conn = sqlite3.connect(self.test_db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO cars (brand, model, year, price, mileage, fuel_type, 
                           transmission, color, description, photos)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', ('TestBrand', 'TestModel', 2023, 1000000, 0, '–ë–µ–Ω–∑–∏–Ω', 
              '–ê–≤—Ç–æ–º–∞—Ç', '–ë–µ–ª—ã–π', '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', '[]'))
        conn.commit()
        conn.close()
        
        cars_after = len(self.db.get_cars())
        self.assertEqual(cars_after, cars_before + 1)
    
    def test_get_cars(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        cars = self.db.get_cars()
        self.assertIsInstance(cars, list)
        self.assertGreater(len(cars), 0)  # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    def test_get_brands(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤"""
        brands = self.db.get_brands()
        self.assertIsInstance(brands, list)
        self.assertGreater(len(brands), 0)
    
    def test_get_car_by_id(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID"""
        cars = self.db.get_cars(limit=1)
        if cars:
            car_id = cars[0]['id']
            car = self.db.get_car_by_id(car_id)
            self.assertIsNotNone(car)
            self.assertEqual(car['id'], car_id)
    
    def test_create_order(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        cars = self.db.get_cars(limit=1)
        if cars:
            car_id = cars[0]['id']
            user_id = 12345
            
            result = self.db.create_order(user_id, car_id)
            self.assertTrue(result)
    
    def test_get_cars_with_brand_filter(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥—É"""
        brands = self.db.get_brands()
        if brands:
            brand = brands[0]
            cars = self.db.get_cars(brand=brand)
            for car in cars:
                self.assertEqual(car['brand'], brand)

class TestCarClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Car"""
    
    def test_car_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Car"""
        car = Car(
            id=1,
            brand="TestBrand",
            model="TestModel",
            year=2023,
            price=1000000,
            mileage=0,
            fuel_type="–ë–µ–Ω–∑–∏–Ω",
            transmission="–ê–≤—Ç–æ–º–∞—Ç",
            color="–ë–µ–ª—ã–π",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
            photos=["photo1.jpg", "photo2.jpg"]
        )
        
        self.assertEqual(car.brand, "TestBrand")
        self.assertEqual(car.model, "TestModel")
        self.assertEqual(car.year, 2023)
        self.assertEqual(car.price, 1000000)
        self.assertTrue(car.is_available)
    
    def test_car_to_dict(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Car –≤ —Å–ª–æ–≤–∞—Ä—å"""
        car = Car(
            id=1,
            brand="TestBrand",
            model="TestModel",
            year=2023,
            price=1000000,
            mileage=0,
            fuel_type="–ë–µ–Ω–∑–∏–Ω",
            transmission="–ê–≤—Ç–æ–º–∞—Ç",
            color="–ë–µ–ª—ã–π",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
            photos=["photo1.jpg"]
        )
        
        car_dict = asdict(car)
        self.assertIsInstance(car_dict, dict)
        self.assertEqual(car_dict['brand'], "TestBrand")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_suite.addTest(unittest.makeSuite(TestCarDatabase))
    test_suite.addTest(unittest.makeSuite(TestCarClass))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.failures)} failures, {len(result.errors)} errors")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_tests()
    

