#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
"""

import sqlite3
import json
import re

def parse_car_name(name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ä–∫–∏, –º–æ–¥–µ–ª–∏ –∏ –≥–æ–¥–∞"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = name.strip()
    
    # –ò—â–µ–º –≥–æ–¥ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    year_match = re.match(r'(\d{4})', name)
    if year_match:
        year = int(year_match.group(1))
        # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        name = name[4:].strip()
    else:
        year = 2020  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å
    parts = name.split(',')
    if len(parts) >= 1:
        brand_model = parts[0].strip()
        # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å
        brand_model_parts = brand_model.split()
        if len(brand_model_parts) >= 2:
            brand = brand_model_parts[0]
            model = ' '.join(brand_model_parts[1:])
        else:
            brand = brand_model
            model = "Unknown"
    else:
        brand = name
        model = "Unknown"
    
    return brand, model, year

def parse_price(price_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã"""
    if not price_str:
        return 0
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    price_clean = re.sub(r'[^\d]', '', price_str)
    try:
        return int(price_clean)
    except:
        return 0

def parse_mileage(mileage_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–±–µ–≥–∞"""
    if not mileage_str:
        return 0
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    mileage_clean = re.sub(r'[^\d]', '', mileage_str)
    try:
        return int(mileage_clean)
    except:
        return 0

def import_cars_with_photos():
    """–ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    conn = sqlite3.connect("cars.db")
    cursor = conn.cursor()
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute('DELETE FROM cars')
    print("üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    imported_count = 0
    
    try:
        with open("cars_extended.csv", 'r', encoding='utf-8') as file:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            next(file)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ
            next(file)  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            for line_num, line in enumerate(file, start=3):
                if not line.strip():
                    continue
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
                parts = line.strip().split(';')
                if len(parts) < 7:
                    continue
                
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                    no = parts[0].strip()
                    name = parts[1].strip()
                    vin = parts[2].strip()
                    cost = parts[3].strip()
                    photos_url = parts[4].strip()
                    mileage = parts[5].strip()
                    production_date = parts[6].strip()
                    
                    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    brand, model, year = parse_car_name(name)
                    
                    # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                    price = parse_price(cost)
                    
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–±–µ–≥
                    mileage_km = parse_mileage(mileage)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    photos_list = []
                    if photos_url and 'drive.google.com' in photos_url:
                        photos_list = [photos_url]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    engine_type = "–ë–µ–Ω–∑–∏–Ω"
                    if "AWD" in name:
                        engine_type = "–ë–µ–Ω–∑–∏–Ω AWD"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ö–ü–ü
                    transmission = "–ê–≤—Ç–æ–º–∞—Ç"
                    if "1,6" in name or "1,5" in name:
                        transmission = "–ê–≤—Ç–æ–º–∞—Ç"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    color = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = f"VIN: {vin}\n–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {production_date}\n–ü—Ä–æ–±–µ–≥: {mileage:,} –∫–º\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {photos_url}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute('''
                        INSERT INTO cars (user_id, brand, model, year, mileage, price,
                                       engine_type, transmission, color, description, photos, is_active)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (1, brand, model, year, mileage_km, price, engine_type, 
                         transmission, color, description, json.dumps(photos_list), 1))
                    
                    imported_count += 1
                    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {brand} {model} ({year}) - {price:,} ‚ÇΩ")
                    print(f"   üì∏ –§–æ—Ç–æ: {photos_url}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                    continue
        
        conn.commit()
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {imported_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('SELECT COUNT(*) FROM cars')
        total_cars = cursor.fetchone()[0]
        
        cursor.execute('SELECT brand, COUNT(*) FROM cars GROUP BY brand ORDER BY COUNT(*) DESC')
        brands = cursor.fetchall()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}")
        print(f"–ú–∞—Ä–∫–∏:")
        for brand, count in brands:
            print(f"  {brand}: {count} —à—Ç.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        cursor.execute('SELECT brand, model, photos FROM cars WHERE photos != "[]"')
        cars_with_photos = cursor.fetchall()
        
        print(f"\nüì∏ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {len(cars_with_photos)}")
        for brand, model, photos in cars_with_photos:
            photos_data = json.loads(photos)
            if photos_data:
                print(f"  {brand} {model}: {photos_data[0]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
    finally:
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöó –ò–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞")
    print("=" * 60)
    
    try:
        import_cars_with_photos()
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("ü§ñ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python simple_working_bot.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()



